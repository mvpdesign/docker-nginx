# The key to use when saving cache files, which will run through the MD5 hashing algorithm.
fastcgi_cache_key "$scheme$request_method$host$request_uri";

# When enabled only one request at a time will be allowed to populate a new cache element
fastcgi_cache_lock on;

# Allows starting a background subrequest to update an expired cache item
# A stale cached response is returned to the client
fastcgi_cache_background_update on;

# If an error occurs when communicating with FastCGI server, return cached content.
# Useful for serving cached content if the PHP process dies or timeouts.
fastcgi_cache_use_stale error timeout updating invalid_header http_500;

# Allow caching of requests which contain the following headers.
fastcgi_ignore_headers Cache-Control Expires Set-Cookie;

# Show the cache status in server responses.
add_header X-Cache $upstream_cache_status;

# Don't skip by default
set $skip_cache 0;

# POST requests and urls with a query string should always go to PHP
if ($request_method = POST) {
        set $skip_cache 1;
}

if ($query_string != "") {
        set $skip_cache 1;
}

# Don't cache uris containing the following segments
if ($request_uri ~* "/wp-admin/|/wp-json/|/xmlrpc.php|wp-.*.php|/feed/|index.php|sitemap(_index)?.xml|wp-cron") {
        set $skip_cache 1;
}

# Don't use the cache for logged in users or recent commenters
# To prevent caching for anyone who has ever been logged into WordPress use |wordpress_logged_in.* 
if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in") {
        set $skip_cache 1;
}

# Skip cache on WooCommerce pages
# if ($request_uri ~* "/store.*|/cart.*|/my-account.*|/checkout.*|/addons.*") {
#         set $skip_cache 1;
# }

# Skip cache for WooCommerce query string
# if ( $arg_add-to-cart != "" ) {
#         set $skip_cache 1;
# }
